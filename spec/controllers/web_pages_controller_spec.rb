require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe WebPagesController do

  def mock_web_page(stubs={})
    @mock_web_page ||= mock_model(WebPage, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all web_pages as @web_pages" do
      WebPage.stub(:all) { [mock_web_page] }
      get :index
      assigns(:web_pages).should eq([mock_web_page])
    end
  end

  describe "GET show" do
    it "assigns the requested web_page as @web_page" do
      WebPage.stub(:find).with("37") { mock_web_page }
      get :show, :id => "37"
      assigns(:web_page).should be(mock_web_page)
    end
  end

  describe "GET new" do
    it "assigns a new web_page as @web_page" do
      WebPage.stub(:new) { mock_web_page }
      get :new
      assigns(:web_page).should be(mock_web_page)
    end
  end

  describe "GET edit" do
    it "assigns the requested web_page as @web_page" do
      WebPage.stub(:find).with("37") { mock_web_page }
      get :edit, :id => "37"
      assigns(:web_page).should be(mock_web_page)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created web_page as @web_page" do
        WebPage.stub(:new).with({'these' => 'params'}) { mock_web_page(:save => true) }
        post :create, :web_page => {'these' => 'params'}
        assigns(:web_page).should be(mock_web_page)
      end

      it "redirects to the created web_page" do
        WebPage.stub(:new) { mock_web_page(:save => true) }
        post :create, :web_page => {}
        response.should redirect_to(web_page_url(mock_web_page))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved web_page as @web_page" do
        WebPage.stub(:new).with({'these' => 'params'}) { mock_web_page(:save => false) }
        post :create, :web_page => {'these' => 'params'}
        assigns(:web_page).should be(mock_web_page)
      end

      it "re-renders the 'new' template" do
        WebPage.stub(:new) { mock_web_page(:save => false) }
        post :create, :web_page => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested web_page" do
        WebPage.stub(:find).with("37") { mock_web_page }
        mock_web_page.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :web_page => {'these' => 'params'}
      end

      it "assigns the requested web_page as @web_page" do
        WebPage.stub(:find) { mock_web_page(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:web_page).should be(mock_web_page)
      end

      it "redirects to the web_page" do
        WebPage.stub(:find) { mock_web_page(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(web_page_url(mock_web_page))
      end
    end

    describe "with invalid params" do
      it "assigns the web_page as @web_page" do
        WebPage.stub(:find) { mock_web_page(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:web_page).should be(mock_web_page)
      end

      it "re-renders the 'edit' template" do
        WebPage.stub(:find) { mock_web_page(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested web_page" do
      WebPage.stub(:find).with("37") { mock_web_page }
      mock_web_page.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the web_pages list" do
      WebPage.stub(:find) { mock_web_page }
      delete :destroy, :id => "1"
      response.should redirect_to(web_pages_url)
    end
  end

end
